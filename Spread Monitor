import MetaTrader5 as mt5
import tkinter as tk
from tkinter import ttk
import multiprocessing
import time

# MT5 Installation Paths
mt5_paths = {
    "FNmarkets": r"C:\Program Files\MetaTrader 5 EXNESS\terminal64.exe",
    "FN": r"C:\Program Files\FundedNext MT5 Terminal\terminal64.exe"
}

# Account Details
accounts = {
    "FNmarkets": {
        "login": 200281,
        "password": "ty5@mfUeVC?X",
        "server": "FNmarkets-Server"
    },
    "FN": {
        "login": 13109044,
        "password": "ubmAX18##",
        "server": "FundedNext-Server 2"
    }
}

# Function to fetch spreads in a separate process
def fetch_spreads(account_name, account_details, mt5_path, output_queue):
    if not mt5.initialize(path=mt5_path):
        output_queue.put((account_name, f"Failed to initialize MT5 for {account_name}: {mt5.last_error()}"))
        return

    # Login to the account
    if not mt5.login(login=account_details["login"], password=account_details["password"], server=account_details["server"]):
        output_queue.put((account_name, f"Failed to log in to {account_name}: {mt5.last_error()}"))
        mt5.shutdown()
        return

    # Fetch symbols
    symbols = mt5.symbols_get()
    symbol_names = [symbol.name for symbol in symbols]

    # Ensure all symbols are visible
    for symbol in symbols:
        if not mt5.symbol_info(symbol.name).visible:
            mt5.symbol_select(symbol.name, True)

    output_queue.put((account_name, f"Successfully logged in to {account_name}"))

    # Monitor spreads
    try:
        while True:
            spreads = {}
            for symbol_name in symbol_names:
                tick = mt5.symbol_info_tick(symbol_name)
                symbol_info = mt5.symbol_info(symbol_name)
                if tick and symbol_info:
                    bid = tick.bid
                    ask = tick.ask
                    point = symbol_info.point
                    if point > 0:  # Valid symbol
                        spread = round((ask - bid) / point, 1)
                        spreads[symbol_name] = spread
            # Send updated spreads to the queue
            output_queue.put((account_name, spreads))
            time.sleep(0.01)  # Update every 500ms
    except Exception as e:
        output_queue.put((account_name, f"Error: {e}"))
    finally:
        mt5.shutdown()

# Function to update the GUI with spreads
def update_gui():
    for account_name, treeview in treeviews.items():
        try:
            while not data_queues[account_name].empty():
                account_name, data = data_queues[account_name].get()
                if isinstance(data, str):  # Log message
                    print(f"[{account_name}] {data}")
                elif isinstance(data, dict):  # Spread data
                    children = treeview.get_children()
                    for i, (symbol, spread) in enumerate(data.items()):
                        if i < len(children):  # Update existing rows
                            treeview.item(children[i], values=(symbol, spread))
                        else:  # Add new rows if necessary
                            treeview.insert("", tk.END, values=(symbol, spread))
        except Exception as e:
            print(f"Error updating GUI for {account_name}: {e}")
    root.after(10, update_gui)  # Refresh every 500ms

# Main function to set up the GUI and multiprocessing
def main():
    global root, treeviews, data_queues
    # Create the main Tkinter GUI
    root = tk.Tk()
    root.title("Real-Time Spread Monitor for Multiple Accounts")

    # Create a Notebook for tabs
    notebook = ttk.Notebook(root)
    notebook.pack(expand=True, fill=tk.BOTH)

    processes = []  # To store subprocesses
    treeviews = {}  # Dictionary to hold Treeview widgets for each account
    data_queues = {}  # Dictionary to hold multiprocessing queues for each account

    # Iterate through accounts to create tabs and Treeview widgets
    for account_name, account_details in accounts.items():
        # Create a tab for the account
        tab = ttk.Frame(notebook)
        notebook.add(tab, text=account_name)

        # Create a Treeview for this account
        columns = ("Symbol", "Spread (Pipettes)")
        tree = ttk.Treeview(tab, columns=columns, show="headings", height=25)
        tree.heading("Symbol", text="Symbol")
        tree.heading("Spread (Pipettes)", text="Spread (Pipettes)")
        tree.pack(expand=True, fill=tk.BOTH)

        # Configure Treeview style for center alignment
        style = ttk.Style()
        style.configure("Treeview.Heading", anchor="center")  # Center align the headings
        style.configure("Treeview", rowheight=25)  # Adjust row height if needed
        tree.column("Symbol", anchor="center", width=150)  # Center align and set width for "Symbol"
        tree.column("Spread (Pipettes)", anchor="center", width=150)  # Center align and set width for "Spread (Pipettes)")

        # Store the Treeview for updating spreads
        treeviews[account_name] = tree

        # Create a multiprocessing queue for this account
        data_queues[account_name] = multiprocessing.Queue()

        # Start a process for fetching spreads
        p = multiprocessing.Process(
            target=fetch_spreads,
            args=(account_name, account_details, mt5_paths[account_name], data_queues[account_name])
        )
        p.start()
        processes.append(p)

    # Start the Tkinter event loop
    update_gui()
    root.mainloop()

    # Clean up processes on exit
    for p in processes:
        p.terminate()
        p.join()

# Ensure proper multiprocessing setup
if __name__ == "__main__":
    multiprocessing.freeze_support()  # Required for multiprocessing on Windows
    main()
